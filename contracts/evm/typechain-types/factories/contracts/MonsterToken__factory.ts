/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MonsterToken,
  MonsterTokenInterface,
} from "../../contracts/MonsterToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "initialOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000d3c38038062000d3c8339810160408190526200003491620001d1565b808484600362000045838262000304565b50600462000054828262000304565b5050506001600160a01b0381166200008657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200009181620000ba565b50506005805460ff909216600160a01b0260ff60a01b1990921691909117905550620003d09050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013457600080fd5b81516001600160401b03808211156200015157620001516200010c565b604051601f8301601f19908116603f011681019082821181831017156200017c576200017c6200010c565b816040528381526020925086838588010111156200019957600080fd5b600091505b83821015620001bd57858201830151818301840152908201906200019e565b600093810190920192909252949350505050565b60008060008060808587031215620001e857600080fd5b84516001600160401b03808211156200020057600080fd5b6200020e8883890162000122565b955060208701519150808211156200022557600080fd5b50620002348782880162000122565b935050604085015160ff811681146200024c57600080fd5b60608601519092506001600160a01b03811681146200026a57600080fd5b939692955090935050565b600181811c908216806200028a57607f821691505b602082108103620002ab57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002ff57600081815260208120601f850160051c81016020861015620002da5750805b601f850160051c820191505b81811015620002fb57828155600101620002e6565b5050505b505050565b81516001600160401b038111156200032057620003206200010c565b620003388162000331845462000275565b84620002b1565b602080601f831160018114620003705760008415620003575750858301515b600019600386901b1c1916600185901b178555620002fb565b600085815260208120601f198616915b82811015620003a15788860151825594840194600190910190840162000380565b5085821015620003c05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61095c80620003e06000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b41146101e8578063a9059cbb146101f0578063dd62ed3e14610203578063f2fde38b1461023c57600080fd5b806370a082311461019c578063715018a6146101c55780638da5cb5b146101cd57600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce5671461015557806340c10f191461017457806342966c681461018957600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f761024f565b604051610104919061078d565b60405180910390f35b61012061011b3660046107f7565b6102e1565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610821565b6102fb565b600554600160a01b900460ff1660405160ff9091168152602001610104565b6101876101823660046107f7565b61031f565b005b61018761019736600461085d565b610335565b6101346101aa366004610876565b6001600160a01b031660009081526020819052604090205490565b610187610342565b6005546040516001600160a01b039091168152602001610104565b6100f7610356565b6101206101fe3660046107f7565b610365565b610134610211366004610898565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61018761024a366004610876565b610373565b60606003805461025e906108cb565b80601f016020809104026020016040519081016040528092919081815260200182805461028a906108cb565b80156102d75780601f106102ac576101008083540402835291602001916102d7565b820191906000526020600020905b8154815290600101906020018083116102ba57829003601f168201915b5050505050905090565b6000336102ef8185856103b3565b60019150505b92915050565b6000336103098582856103c5565b610314858585610444565b506001949350505050565b6103276104a3565b61033182826104d0565b5050565b61033f3382610506565b50565b61034a6104a3565b610354600061053c565b565b60606004805461025e906108cb565b6000336102ef818585610444565b61037b6104a3565b6001600160a01b0381166103aa57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61033f8161053c565b6103c0838383600161058e565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981101561043e578181101561042f57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016103a1565b61043e8484848403600061058e565b50505050565b6001600160a01b03831661046e57604051634b637e8f60e11b8152600060048201526024016103a1565b6001600160a01b0382166104985760405163ec442f0560e01b8152600060048201526024016103a1565b6103c0838383610663565b6005546001600160a01b031633146103545760405163118cdaa760e01b81523360048201526024016103a1565b6001600160a01b0382166104fa5760405163ec442f0560e01b8152600060048201526024016103a1565b61033160008383610663565b6001600160a01b03821661053057604051634b637e8f60e11b8152600060048201526024016103a1565b61033182600083610663565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0384166105b85760405163e602df0560e01b8152600060048201526024016103a1565b6001600160a01b0383166105e257604051634a1406b160e11b8152600060048201526024016103a1565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561043e57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161065591815260200190565b60405180910390a350505050565b6001600160a01b03831661068e5780600260008282546106839190610905565b909155506107009050565b6001600160a01b038316600090815260208190526040902054818110156106e15760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016103a1565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661071c5760028054829003905561073b565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161078091815260200190565b60405180910390a3505050565b600060208083528351808285015260005b818110156107ba5785810183015185820160400152820161079e565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146107f257600080fd5b919050565b6000806040838503121561080a57600080fd5b610813836107db565b946020939093013593505050565b60008060006060848603121561083657600080fd5b61083f846107db565b925061084d602085016107db565b9150604084013590509250925092565b60006020828403121561086f57600080fd5b5035919050565b60006020828403121561088857600080fd5b610891826107db565b9392505050565b600080604083850312156108ab57600080fd5b6108b4836107db565b91506108c2602084016107db565b90509250929050565b600181811c908216806108df57607f821691505b6020821081036108ff57634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102f557634e487b7160e01b600052601160045260246000fdfea2646970667358221220b24e17514ee9383fd8e858591ae85f1b86605b8e41f56488d3bc79f8ec9cee4564736f6c63430008140033";

type MonsterTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MonsterTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MonsterToken__factory extends ContractFactory {
  constructor(...args: MonsterTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name: string,
    symbol: string,
    decimals_: BigNumberish,
    initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      name,
      symbol,
      decimals_,
      initialOwner,
      overrides || {}
    );
  }
  override deploy(
    name: string,
    symbol: string,
    decimals_: BigNumberish,
    initialOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      name,
      symbol,
      decimals_,
      initialOwner,
      overrides || {}
    ) as Promise<
      MonsterToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MonsterToken__factory {
    return super.connect(runner) as MonsterToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MonsterTokenInterface {
    return new Interface(_abi) as MonsterTokenInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MonsterToken {
    return new Contract(address, _abi, runner) as unknown as MonsterToken;
  }
}
