/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { SwapSage, SwapSageInterface } from "../../contracts/SwapSage";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "swapId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "destinationChain",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "destinationAddress",
        type: "string",
      },
    ],
    name: "SwapInitiated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "destinationChain",
        type: "string",
      },
      {
        internalType: "string",
        name: "destinationAddress",
        type: "string",
      },
    ],
    name: "initiateSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506001600055338061003c57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100458161004b565b5061009d565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6105e3806100ac6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806322ccf75114610051578063715018a6146100665780638da5cb5b1461006e578063f2fde38b1461008d575b600080fd5b61006461005f366004610490565b6100a0565b005b61006461025f565b600154604080516001600160a01b039092168252519081900360200190f35b61006461009b36600461051a565b610273565b6100a86102b1565b600085116100fd5760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064015b60405180910390fd5b8261014a5760405162461bcd60e51b815260206004820152601a60248201527f44657374696e6174696f6e20636861696e20726571756972656400000000000060448201526064016100f4565b806101975760405162461bcd60e51b815260206004820152601c60248201527f44657374696e6174696f6e20616464726573732072657175697265640000000060448201526064016100f4565b6040516bffffffffffffffffffffffff1933606090811b8216602084015288901b1660348201526048810186905242606882015260009060880160408051601f19818403018152919052805160209091012090506102006001600160a01b0388163330896102db565b336001600160a01b0316817f7a8b977a3a944e25d62402a05d122ed130bf8e8724c1ed5eb8fa45fff2475a6689898989898960405161024496959493929190610565565b60405180910390a3506102576001600055565b505050505050565b61026761033b565b6102716000610368565b565b61027b61033b565b6001600160a01b0381166102a557604051631e4fbdf760e01b8152600060048201526024016100f4565b6102ae81610368565b50565b6002600054036102d457604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526103359085906103ba565b50505050565b6001546001600160a01b031633146102715760405163118cdaa760e01b81523360048201526024016100f4565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080602060008451602086016000885af1806103dd576040513d6000823e3d81fd5b50506000513d915081156103f5578060011415610402565b6001600160a01b0384163b155b1561033557604051635274afe760e01b81526001600160a01b03851660048201526024016100f4565b80356001600160a01b038116811461044257600080fd5b919050565b60008083601f84011261045957600080fd5b50813567ffffffffffffffff81111561047157600080fd5b60208301915083602082850101111561048957600080fd5b9250929050565b600080600080600080608087890312156104a957600080fd5b6104b28761042b565b955060208701359450604087013567ffffffffffffffff808211156104d657600080fd5b6104e28a838b01610447565b909650945060608901359150808211156104fb57600080fd5b5061050889828a01610447565b979a9699509497509295939492505050565b60006020828403121561052c57600080fd5b6105358261042b565b9392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b038716815285602082015260806040820152600061058d60808301868861053c565b82810360608401526105a081858761053c565b999850505050505050505056fea2646970667358221220b9cc5736496194c1c0d5c782fbf5c83b16ded4155bcb8e72f66069cb2f48bdf264736f6c63430008180033";

type SwapSageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapSageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapSage__factory extends ContractFactory {
  constructor(...args: SwapSageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SwapSage & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SwapSage__factory {
    return super.connect(runner) as SwapSage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapSageInterface {
    return new Interface(_abi) as SwapSageInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SwapSage {
    return new Contract(address, _abi, runner) as unknown as SwapSage;
  }
}
