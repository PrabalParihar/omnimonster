/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SwapSageHTLCInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claim"
      | "fund"
      | "getCurrentTime"
      | "getDetails"
      | "isClaimable"
      | "isRefundable"
      | "refund"
      | "swaps"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Claimed" | "Funded" | "Refunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRefundable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "refund", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "swaps", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDetails", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRefundable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swaps", data: BytesLike): Result;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    contractId: BytesLike,
    beneficiary: AddressLike,
    preimage: BytesLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    contractId: string,
    beneficiary: string,
    preimage: string,
    value: bigint
  ];
  export interface OutputObject {
    contractId: string;
    beneficiary: string;
    preimage: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundedEvent {
  export type InputTuple = [
    contractId: BytesLike,
    originator: AddressLike,
    beneficiary: AddressLike,
    token: AddressLike,
    value: BigNumberish,
    hashLock: BytesLike,
    timelock: BigNumberish
  ];
  export type OutputTuple = [
    contractId: string,
    originator: string,
    beneficiary: string,
    token: string,
    value: bigint,
    hashLock: string,
    timelock: bigint
  ];
  export interface OutputObject {
    contractId: string;
    originator: string;
    beneficiary: string;
    token: string;
    value: bigint;
    hashLock: string;
    timelock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundedEvent {
  export type InputTuple = [
    contractId: BytesLike,
    originator: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [
    contractId: string,
    originator: string,
    value: bigint
  ];
  export interface OutputObject {
    contractId: string;
    originator: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SwapSageHTLC extends BaseContract {
  connect(runner?: ContractRunner | null): SwapSageHTLC;
  waitForDeployment(): Promise<this>;

  interface: SwapSageHTLCInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [_contractId: BytesLike, _preimage: BytesLike],
    [void],
    "nonpayable"
  >;

  fund: TypedContractMethod<
    [
      _contractId: BytesLike,
      _token: AddressLike,
      _beneficiary: AddressLike,
      _hashLock: BytesLike,
      _timelock: BigNumberish,
      _value: BigNumberish
    ],
    [void],
    "payable"
  >;

  getCurrentTime: TypedContractMethod<[], [bigint], "view">;

  getDetails: TypedContractMethod<
    [_contractId: BytesLike],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        token: string;
        beneficiary: string;
        originator: string;
        hashLock: string;
        timelock: bigint;
        value: bigint;
        state: bigint;
      }
    ],
    "view"
  >;

  isClaimable: TypedContractMethod<[_contractId: BytesLike], [boolean], "view">;

  isRefundable: TypedContractMethod<
    [_contractId: BytesLike],
    [boolean],
    "view"
  >;

  refund: TypedContractMethod<[_contractId: BytesLike], [void], "nonpayable">;

  swaps: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        token: string;
        beneficiary: string;
        originator: string;
        hashLock: string;
        timelock: bigint;
        value: bigint;
        state: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [_contractId: BytesLike, _preimage: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fund"
  ): TypedContractMethod<
    [
      _contractId: BytesLike,
      _token: AddressLike,
      _beneficiary: AddressLike,
      _hashLock: BytesLike,
      _timelock: BigNumberish,
      _value: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getCurrentTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDetails"
  ): TypedContractMethod<
    [_contractId: BytesLike],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        token: string;
        beneficiary: string;
        originator: string;
        hashLock: string;
        timelock: bigint;
        value: bigint;
        state: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isClaimable"
  ): TypedContractMethod<[_contractId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRefundable"
  ): TypedContractMethod<[_contractId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[_contractId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swaps"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        token: string;
        beneficiary: string;
        originator: string;
        hashLock: string;
        timelock: bigint;
        value: bigint;
        state: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Funded"
  ): TypedContractEvent<
    FundedEvent.InputTuple,
    FundedEvent.OutputTuple,
    FundedEvent.OutputObject
  >;
  getEvent(
    key: "Refunded"
  ): TypedContractEvent<
    RefundedEvent.InputTuple,
    RefundedEvent.OutputTuple,
    RefundedEvent.OutputObject
  >;

  filters: {
    "Claimed(bytes32,address,bytes32,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;

    "Funded(bytes32,address,address,address,uint256,bytes32,uint256)": TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;
    Funded: TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;

    "Refunded(bytes32,address,uint256)": TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
    Refunded: TypedContractEvent<
      RefundedEvent.InputTuple,
      RefundedEvent.OutputTuple,
      RefundedEvent.OutputObject
    >;
  };
}
