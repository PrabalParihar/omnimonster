/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FusionHTLCInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claim"
      | "contractExists"
      | "contracts"
      | "fundERC20"
      | "fundETH"
      | "generateId"
      | "getDetails"
      | "getPreimage"
      | "isClaimable"
      | "isRefundable"
      | "refund"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "HTLCClaimed" | "HTLCCreated" | "HTLCRefunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contractExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contracts",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fundERC20",
    values: [
      BytesLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fundETH",
    values: [BytesLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateId",
    values: [
      AddressLike,
      AddressLike,
      BytesLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPreimage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRefundable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "refund", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "generateId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDetails", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPreimage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRefundable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
}

export namespace HTLCClaimedEvent {
  export type InputTuple = [
    contractId: BytesLike,
    claimer: AddressLike,
    preimage: BytesLike
  ];
  export type OutputTuple = [
    contractId: string,
    claimer: string,
    preimage: string
  ];
  export interface OutputObject {
    contractId: string;
    claimer: string;
    preimage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTLCCreatedEvent {
  export type InputTuple = [
    contractId: BytesLike,
    originator: AddressLike,
    beneficiary: AddressLike,
    token: AddressLike,
    value: BigNumberish,
    hashLock: BytesLike,
    timelock: BigNumberish
  ];
  export type OutputTuple = [
    contractId: string,
    originator: string,
    beneficiary: string,
    token: string,
    value: bigint,
    hashLock: string,
    timelock: bigint
  ];
  export interface OutputObject {
    contractId: string;
    originator: string;
    beneficiary: string;
    token: string;
    value: bigint;
    hashLock: string;
    timelock: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HTLCRefundedEvent {
  export type InputTuple = [contractId: BytesLike, refunder: AddressLike];
  export type OutputTuple = [contractId: string, refunder: string];
  export interface OutputObject {
    contractId: string;
    refunder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FusionHTLC extends BaseContract {
  connect(runner?: ContractRunner | null): FusionHTLC;
  waitForDeployment(): Promise<this>;

  interface: FusionHTLCInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [contractId: BytesLike, preimage: BytesLike],
    [void],
    "nonpayable"
  >;

  contractExists: TypedContractMethod<
    [contractId: BytesLike],
    [boolean],
    "view"
  >;

  contracts: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, string, bigint, bigint, bigint, string] & {
        token: string;
        beneficiary: string;
        originator: string;
        hashLock: string;
        timelock: bigint;
        value: bigint;
        state: bigint;
        preimage: string;
      }
    ],
    "view"
  >;

  fundERC20: TypedContractMethod<
    [
      contractId: BytesLike,
      beneficiary: AddressLike,
      hashLock: BytesLike,
      timelock: BigNumberish,
      token: AddressLike,
      value: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  fundETH: TypedContractMethod<
    [
      contractId: BytesLike,
      beneficiary: AddressLike,
      hashLock: BytesLike,
      timelock: BigNumberish
    ],
    [void],
    "payable"
  >;

  generateId: TypedContractMethod<
    [
      originator: AddressLike,
      beneficiary: AddressLike,
      hashLock: BytesLike,
      timelock: BigNumberish,
      token: AddressLike,
      value: BigNumberish,
      nonce: BigNumberish
    ],
    [string],
    "view"
  >;

  getDetails: TypedContractMethod<
    [contractId: BytesLike],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        token: string;
        beneficiary: string;
        originator: string;
        hashLock: string;
        timelock: bigint;
        value: bigint;
        state: bigint;
      }
    ],
    "view"
  >;

  getPreimage: TypedContractMethod<[contractId: BytesLike], [string], "view">;

  isClaimable: TypedContractMethod<[contractId: BytesLike], [boolean], "view">;

  isRefundable: TypedContractMethod<[contractId: BytesLike], [boolean], "view">;

  refund: TypedContractMethod<[contractId: BytesLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [contractId: BytesLike, preimage: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contractExists"
  ): TypedContractMethod<[contractId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "contracts"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, string, bigint, bigint, bigint, string] & {
        token: string;
        beneficiary: string;
        originator: string;
        hashLock: string;
        timelock: bigint;
        value: bigint;
        state: bigint;
        preimage: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "fundERC20"
  ): TypedContractMethod<
    [
      contractId: BytesLike,
      beneficiary: AddressLike,
      hashLock: BytesLike,
      timelock: BigNumberish,
      token: AddressLike,
      value: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundETH"
  ): TypedContractMethod<
    [
      contractId: BytesLike,
      beneficiary: AddressLike,
      hashLock: BytesLike,
      timelock: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "generateId"
  ): TypedContractMethod<
    [
      originator: AddressLike,
      beneficiary: AddressLike,
      hashLock: BytesLike,
      timelock: BigNumberish,
      token: AddressLike,
      value: BigNumberish,
      nonce: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDetails"
  ): TypedContractMethod<
    [contractId: BytesLike],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        token: string;
        beneficiary: string;
        originator: string;
        hashLock: string;
        timelock: bigint;
        value: bigint;
        state: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPreimage"
  ): TypedContractMethod<[contractId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "isClaimable"
  ): TypedContractMethod<[contractId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRefundable"
  ): TypedContractMethod<[contractId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[contractId: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "HTLCClaimed"
  ): TypedContractEvent<
    HTLCClaimedEvent.InputTuple,
    HTLCClaimedEvent.OutputTuple,
    HTLCClaimedEvent.OutputObject
  >;
  getEvent(
    key: "HTLCCreated"
  ): TypedContractEvent<
    HTLCCreatedEvent.InputTuple,
    HTLCCreatedEvent.OutputTuple,
    HTLCCreatedEvent.OutputObject
  >;
  getEvent(
    key: "HTLCRefunded"
  ): TypedContractEvent<
    HTLCRefundedEvent.InputTuple,
    HTLCRefundedEvent.OutputTuple,
    HTLCRefundedEvent.OutputObject
  >;

  filters: {
    "HTLCClaimed(bytes32,address,bytes32)": TypedContractEvent<
      HTLCClaimedEvent.InputTuple,
      HTLCClaimedEvent.OutputTuple,
      HTLCClaimedEvent.OutputObject
    >;
    HTLCClaimed: TypedContractEvent<
      HTLCClaimedEvent.InputTuple,
      HTLCClaimedEvent.OutputTuple,
      HTLCClaimedEvent.OutputObject
    >;

    "HTLCCreated(bytes32,address,address,address,uint256,bytes32,uint256)": TypedContractEvent<
      HTLCCreatedEvent.InputTuple,
      HTLCCreatedEvent.OutputTuple,
      HTLCCreatedEvent.OutputObject
    >;
    HTLCCreated: TypedContractEvent<
      HTLCCreatedEvent.InputTuple,
      HTLCCreatedEvent.OutputTuple,
      HTLCCreatedEvent.OutputObject
    >;

    "HTLCRefunded(bytes32,address)": TypedContractEvent<
      HTLCRefundedEvent.InputTuple,
      HTLCRefundedEvent.OutputTuple,
      HTLCRefundedEvent.OutputObject
    >;
    HTLCRefunded: TypedContractEvent<
      HTLCRefundedEvent.InputTuple,
      HTLCRefundedEvent.OutputTuple,
      HTLCRefundedEvent.OutputObject
    >;
  };
}
