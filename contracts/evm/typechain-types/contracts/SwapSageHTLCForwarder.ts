/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SwapSageHTLCForwarderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canMetaClaim"
      | "canMetaRefund"
      | "claim"
      | "getDetails"
      | "htlc"
      | "isClaimable"
      | "isRefundable"
      | "isTrustedForwarder"
      | "refund"
      | "trustedForwarder"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MetaTransactionClaim"): EventFragment;

  encodeFunctionData(
    functionFragment: "canMetaClaim",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canMetaRefund",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "htlc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isClaimable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRefundable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "refund", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "canMetaClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canMetaRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDetails", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "htlc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRefundable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
}

export namespace MetaTransactionClaimEvent {
  export type InputTuple = [
    contractId: BytesLike,
    claimer: AddressLike,
    preimage: BytesLike,
    forwarder: AddressLike
  ];
  export type OutputTuple = [
    contractId: string,
    claimer: string,
    preimage: string,
    forwarder: string
  ];
  export interface OutputObject {
    contractId: string;
    claimer: string;
    preimage: string;
    forwarder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SwapSageHTLCForwarder extends BaseContract {
  connect(runner?: ContractRunner | null): SwapSageHTLCForwarder;
  waitForDeployment(): Promise<this>;

  interface: SwapSageHTLCForwarderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canMetaClaim: TypedContractMethod<
    [contractId: BytesLike, user: AddressLike],
    [boolean],
    "view"
  >;

  canMetaRefund: TypedContractMethod<
    [contractId: BytesLike, user: AddressLike],
    [boolean],
    "view"
  >;

  claim: TypedContractMethod<
    [contractId: BytesLike, preimage: BytesLike],
    [void],
    "nonpayable"
  >;

  getDetails: TypedContractMethod<
    [contractId: BytesLike],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        token: string;
        beneficiary: string;
        originator: string;
        hashLock: string;
        timelock: bigint;
        value: bigint;
        state: bigint;
      }
    ],
    "view"
  >;

  htlc: TypedContractMethod<[], [string], "view">;

  isClaimable: TypedContractMethod<[contractId: BytesLike], [boolean], "view">;

  isRefundable: TypedContractMethod<[contractId: BytesLike], [boolean], "view">;

  isTrustedForwarder: TypedContractMethod<
    [forwarder: AddressLike],
    [boolean],
    "view"
  >;

  refund: TypedContractMethod<[contractId: BytesLike], [void], "nonpayable">;

  trustedForwarder: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canMetaClaim"
  ): TypedContractMethod<
    [contractId: BytesLike, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "canMetaRefund"
  ): TypedContractMethod<
    [contractId: BytesLike, user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [contractId: BytesLike, preimage: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDetails"
  ): TypedContractMethod<
    [contractId: BytesLike],
    [
      [string, string, string, string, bigint, bigint, bigint] & {
        token: string;
        beneficiary: string;
        originator: string;
        hashLock: string;
        timelock: bigint;
        value: bigint;
        state: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "htlc"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isClaimable"
  ): TypedContractMethod<[contractId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRefundable"
  ): TypedContractMethod<[contractId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTrustedForwarder"
  ): TypedContractMethod<[forwarder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[contractId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedForwarder"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "MetaTransactionClaim"
  ): TypedContractEvent<
    MetaTransactionClaimEvent.InputTuple,
    MetaTransactionClaimEvent.OutputTuple,
    MetaTransactionClaimEvent.OutputObject
  >;

  filters: {
    "MetaTransactionClaim(bytes32,address,bytes32,address)": TypedContractEvent<
      MetaTransactionClaimEvent.InputTuple,
      MetaTransactionClaimEvent.OutputTuple,
      MetaTransactionClaimEvent.OutputObject
    >;
    MetaTransactionClaim: TypedContractEvent<
      MetaTransactionClaimEvent.InputTuple,
      MetaTransactionClaimEvent.OutputTuple,
      MetaTransactionClaimEvent.OutputObject
    >;
  };
}
